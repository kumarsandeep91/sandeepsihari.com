{"pageProps":{"data":{"title":"C++ type casting","author":"Sandeep Sihari","category":"cpp","permalink":"/cpp-type-casting/","tags":"cpp programming","date":"2017-11-13"},"content":"<h2>C++ type casting</h2>\n<p>\n    <b>Type Casting</b> refers tp as converting one data type into another data types. Some data conversions are <b>not possible</b> while some are <b>possible</b> but result in <b>data loss.</b>\n</p>\n<h3>Potential type casting problems</h3>\n<div class=\"table-responsive\">\n    <table class=\"table table-bordered\">\n        <tbody>\n            <tr>\n                <th><b>Conversion</b></th>\n                <th><b>Potential Issues</b></th>\n            </tr>\n            <tr>\n                <td>Large floating point type to small floating point type</td>\n                <td>Loss of precision and/or the starting value might be out of range for the new type</td>\n            </tr>\n            <tr>\n                <td>Floating point type to integer type</td>\n                <td>Loss of the fractional component of the floating point type and/or out of range</td>\n            </tr>\n            <tr>\n                <td>Bigger integer type to smaller integer type</td>\n                <td>Starting value may be out of range for the new type</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<p>\n    This table only deals with numeric data type conversions. There are other conversion types such as from <b>character to numeric or numeric to character</b>, or among character types. C++ also uses the boolean type that represents true or false. If you assign a zero value to a bool variable, it will be converted to false. Any non-zero value is converted to true.\n</p>\n<h3>Different type castings</h3>\n<ul>\n    <li>Implicit Casting: Performs automatically by C++.</li>\n    <li>Explicit Casting: Performs by the user.</li>\n</ul>\n<h4>Implicit Casting</h4>\n<pre class=\"line-numbers language-cpp\">\n<code>\n    // smaller(int) data type to larger data type(long)\n    int x = 100;\n    long y;\n    y = x;\n    cout << y << endl;\n</code>\n</pre>\n<p><b>Output</b></p>\n<pre class=\"language-bash\">\n<code>\n    $ 100\n    $ \n</code>\n</pre>\n<pre class=\"line-numbers language-cpp\">\n<code>\n    // character to numeric conversion\n    char ch = 'S';\n    int i;\n    i = ch;\n    cout << i << endl;\n</code>\n</pre>\n<p><b>Output</b></p>\n<pre class=\"language-bash\">\n<code>\n    $ 83\n    $ \n</code>\n</pre>\n<pre class=\"line-numbers language-cpp\">\n<code>\n    // numeric to character conversion\n    int i = 65;\n    char ch;\n    ch = i;\n    cout << ch << endl;\n</code>\n</pre>\n<p><b>Output</b></p>\n<pre class=\"language-bash\">\n<code>\n    $ A\n    $ \n</code>\n</pre>\n<pre class=\"line-numbers language-cpp\">\n<code>\n    // numeric to boolean conversion\n    int i = 65, j = 0;\n    bool b = i;\n    bool c = j;\n    cout << \"b is \" << b << endl;\n    cout << \"c is \" << c << endl;\n</code>\n</pre>\n<p><b>Output</b></p>\n<pre class=\"language-bash\">\n<code>\n    $ b is true\n    $ c is false\n    $\n</code>\n</pre>\n<h4>Explicit Casting</h4>\n<p><b>Method 1</b></p>\n<pre class=\"line-numbers language-cpp\">\n<code>\n    char ch = 'A', x = 'a';\n    int i, j;\n    // casting statement. character to int.\n    i = (int) ch;\n    cout << \"i is \" << i << endl;\n<pre><code>// or you can also do this\nj = int(x);\ncout &#x3C;&#x3C; \"j is \" &#x3C;&#x3C; j &#x3C;&#x3C; endl;\n</code></pre>\n</code>\n</pre>\n<p><b>Output</b></p>\n<pre class=\"language-bash\">\n<code>\n    $ i is 65\n    $ j is 97\n    $\n</code>\n</pre>\n<p><b>Method 2: using static_cast&lt;type&gt;</b></p>\n<pre class=\"line-numbers language-cpp\">\n<code>\n    char ch;\n    int i = 65;\n    ch = static_cast<char>(i);   // int to char\n    cout << \"ch is \" << ch << endl;\n</code>\n</pre>\n<p><b>Output</b></p>\n<pre class=\"language-bash\">\n<code>\n    $ ch is A\n    $\n</code>\n</pre>\n"},"__N_SSG":true}